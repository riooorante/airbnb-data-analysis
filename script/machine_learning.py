# -*- coding: utf-8 -*-
"""machine_learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gZ6xT38JzQTbQ3R_IH417AicDgKs9o2k
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import OneHotEncoder, LabelEncoder
from imblearn.over_sampling import SMOTE
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV

df = pd.read_csv("/content/sample_data/clean_data.csv")
df.head()

df_pengunjung = df.iloc[:,0:10]
df_pengunjung.head(2)

df_pengunjung['ts_min'] = pd.to_datetime(df_pengunjung['ts_min'])
df_pengunjung['hour'] = df_pengunjung['ts_min'].dt.hour
df_pengunjung.head(2)

df_pengunjung.drop(['ds'	,'ts_min',	'ts_max'], inplace=True, axis=1)

df_pengunjung.drop(['id_visitor','dim_user_agent'], inplace=True, axis=1)

X = df_pengunjung.drop(['sent_booking_request'], axis=1)
X

y = df_pengunjung.loc[:,['sent_booking_request']]
y.value_counts() # imbalance data

encoderLE = LabelEncoder()
X['dim_device_app_combo'] = encoderLE.fit_transform(X['dim_device_app_combo'])

smote = SMOTE(random_state=42)
X_new , y_new = smote.fit_resample(np.array(X), np.array(y))

type(X_new)

y_new = y_new.reshape(-1,1)
y_new.shape

df_pengunjung = pd.concat([pd.DataFrame(X_new,columns=['session','device_app_combo','did_search','sent_message','hour' ]), pd.DataFrame(y_new,columns=["sent_booking_request"])], axis=1)

df_pengunjung

sns.heatmap(df_pengunjung.corr(), annot=True, cmap="YlGnBu")

for code, category in enumerate(encoderLE.classes_):
    print(f"Kode {code}: {category}")

def convert_data(data):
  for code, category in enumerate(encoderLE.classes_):
      if code ==  data:
        return category

df_pengunjung['device_app_combo'] = [convert_data(i) for i in df_pengunjung.device_app_combo]
df = pd.get_dummies(df_pengunjung['device_app_combo'])

df_pengunjung = pd.concat([df_pengunjung, df],axis=1)

df_pengunjung = df_pengunjung.drop(['device_app_combo'], axis=1)

df_pengunjung

attributes = df_pengunjung.drop(['sent_booking_request'], axis=1)
label = df_pengunjung['sent_booking_request']

X_train, X_test, y_train, y_test = train_test_split(attributes,label, test_size=0.2)

X_train

model = RandomForestRegressor()
param_grid = {
    "n_estimators": [150,200,250,300],
    "max_features":[8,10,12,14],
    "max_depth":[10,15,20],
    "min_samples_split":[2,4,6,8]
}
grid_search = GridSearchCV(model, param_grid, cv=5, scoring="neg_mean_squared_error", return_train_score=True)
grid_search.fit(X_train, y_train)

best = grid_search.best_estimator_

best.score(X_test, y_test)